from asyncio.log import logger
from aiogram import Bot, Dispatcher, types, F
import easyocr
import asyncio
import random
import logging

from aiogram.filters import Command
from aiogram.types import Message,KeyboardButton,ReplyKeyboardMarkup



API_TOKEN = '5354076694:AAEFd2qD8VCVpb-Sg9watarCsAeEVuTbbhA'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()  # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
TurnOn = False;

src = 'C:/Users/tappy/Desktop/xxx/photos/'  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π


@dp.message(Command("start"))
async def cmd_start(message: Message):
    kb = [
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏")],
        [KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚úîÔ∏è")],
        [KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é")
    await message.answer("–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç –º–æ—Ç–∏–≤–∞–π–¥–µ—Ä, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω—è", reply_markup=keyboard)



@dp.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏")
async def with_picture(message: types.Message):
    await message.reply("–ñ–¥—É –∫–∞—Ä—Ç–∏–Ω–∫—É!")


@dp.message(F.text == "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚úîÔ∏è")
async def with_pushes(message: types.Message):
    kb = [
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏")],
        [KeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚ùå")],
        [KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é")
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚úîÔ∏è", reply_markup=keyboard)
    asyncio.create_task(send_reminders(message.chat.id, True)) 

@dp.message(F.text == "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚ùå")
async def without_pushes(message: types.Message):
    kb = [
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏")],
        [KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚úîÔ∏è")],
        [KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é")
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚ùå", reply_markup=keyboard)
    asyncio.create_task(send_reminders(message.chat.id, False)) 

@dp.message(F.text == "–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç")
async def with_chat(message: types.Message):
    kb = [
        [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é")
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", reply_markup=keyboard)

@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def with_menu(message: types.Message):
    kb = [
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏")],
        [KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚úîÔ∏è")],
        [KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é")
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=keyboard)

async def send_reminders(chat_id, turnOn):
    global TurnOn
    TurnOn = turnOn

    list = [
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ. üåÖ",
        "–ù–µ –±–æ–π—Ç–µ—Å—å –¥–µ–ª–∞—Ç—å –æ—à–∏–±–∫–∏; –æ–Ω–∏ ‚Äî —à–∞–≥–∏ –∫ —É—Å–ø–µ—Ö—É. üöÄ",
        "–í–∞—à–∏ –º–µ—á—Ç—ã –Ω–µ –∏–º–µ—é—Ç —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏. üåü",
        "–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ –¥–µ–ª–∞—é—Ç –≤–∞—Å —Å–∏–ª—å–Ω–µ–µ. üí™",
        "–ù–∞—á–Ω–∏—Ç–µ —Å —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å, –∏ —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ. üèÅ",
        "–ö–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏. üë£",
        "–í—ã —Å–ø–æ—Å–æ–±–Ω—ã –Ω–∞ –±–æ–ª—å—à–µ–µ, —á–µ–º –¥—É–º–∞–µ—Ç–µ. üåà",
        "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–ª, –∞ –ø—É—Ç—å. üõ§Ô∏è",
        "–í–µ—Ä—å—Ç–µ –≤ —Å–µ–±—è, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π –Ω–µ –≤–µ—Ä–∏—Ç. ‚ú®",
        "–í–∞—à–µ –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –µ–≥–æ –Ω–∞ —á—É–∂–∏–µ –º–µ—á—Ç—ã. ‚è≥",
        "–°–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –º–∞—Å–∫–µ. üé≠",
        "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ. üîç",
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å. üîÑ",
        "–ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏; –∫–∞–∂–¥—ã–π –∏–¥–µ—Ç —Å–≤–æ–∏–º –ø—É—Ç–µ–º. üõ§Ô∏è",
        "–°–º–µ–ª–æ—Å—Ç—å ‚Äî —ç—Ç–æ –Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä–∞—Ö–∞, –∞ —É–º–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–≥–æ. ü¶Å",
        "–í–∞—à–∏ –º—ã—Å–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –≤–∞—à—É —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å. üí≠",
        "–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ —É—Å—Ç–∞–ª–∏; –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏. üèÜ"
        "–ö–∞–∂–¥—ã–π —É—Å–ø–µ—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ä–µ—à–µ–Ω–∏—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å. ‚úîÔ∏è",
        "–î–µ–ª–∞–π—Ç–µ —Ç–æ, —á—Ç–æ –ª—é–±–∏—Ç–µ, –∏ –≤—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å. ‚ù§Ô∏è",
        "–í—ã ‚Äî –∞–≤—Ç–æ—Ä —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏; —Å–¥–µ–ª–∞–π—Ç–µ –µ–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π! üìñ",
        "–í–∞—à–∏ –º–µ—á—Ç—ã –Ω–µ –∏–º–µ—é—Ç —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏. üåü"
        ]
    
    while TurnOn == True:
        random_message = random.choice(list)
        await bot.send_message(chat_id, random_message) # –ø–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç—É
        await asyncio.sleep(10) 


@dp.message(F.photo)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def process_photo(message: Message):
    if message.photo:      
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ file_id
            await bot.download(
                message.photo[-1], 
                destination=f"C:/Users/tappy/Desktop/xxx/photos/{message.photo[-1].file_id}.jpg"
            )
            await message.answer("–§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω –≤ –ø–∞–ø–∫—É photos")  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

            reader = easyocr.Reader(['en', 'ru'])
            result = reader.readtext(f"C:/Users/tappy/Desktop/xxx/photos/{message.photo[-1].file_id}.jpg", detail=0, paragraph=True)
            if not result:
                await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏")
            else:
                result_text = '\n'.join(result)
                await message.answer(result_text)

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

with open('train_data.txt', 'r', encoding='utf-8') as file:
    text_of_book = file.read()


def load_data(file_path):
    qa_pairs = {}
    with open(file_path, 'r', encoding='utf-8') as file:
        for line in file:
            if ':' in line:
                question, answer = line.split(':', 1)
                qa_pairs[question.strip().lower()] = answer.strip()
    return qa_pairs


@dp.message(F.text)
async def handle_message(message: types.Message):
    question = message.text.strip().lower()
    response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å."
    for key in qa_pairs.keys():
        if any(word in question for word in key.split()):
            response = qa_pairs[key]
            break
    await message.answer(response)
    logger.info(f"–í–æ–ø—Ä–æ—Å: {question} | –û—Ç–≤–µ—Ç: {response}")

# –ú–µ—Ç–æ–¥ main –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    global qa_pairs
    qa_pairs = load_data('train_data.txt') 
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –æ–±—ä–µ–∫—Ç–∞ bot

if __name__ == '__main__':
    asyncio.run(main())
